steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REPO}/${_APP_NAME}:$SHORT_SHA', '.']

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image'
    args: ['push', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REPO}/${_APP_NAME}:$SHORT_SHA']

  # Step 3: Fetch secrets from Secret Manager
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Fetch Secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Fetching Secrets..."
        DB_USER=$(gcloud secrets versions access latest --secret=db-user)
        DB_PASSWORD=$(gcloud secrets versions access latest --secret=db-password)
        echo "Secrets fetched."

        # Save secrets to a temporary file for later steps
        echo "DB_USER=$DB_USER" >> /workspace/env.list
        echo "DB_PASSWORD=$DB_PASSWORD" >> /workspace/env.list

  # Step 4: Deploy the image to Cloud Run and set environment variables
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy to Cloud Run'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy my-flask123 \
          --image=us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REPO}/${_APP_NAME}:$SHORT_SHA \
          --region=us-central1 \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars DB_USER=$(cat /workspace/env.list | grep DB_USER | cut -d'=' -f2) \
          --set-env-vars DB_PASSWORD=$(cat /workspace/env.list | grep DB_PASSWORD | cut -d'=' -f2)

images:
  - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REPO}/${_APP_NAME}:$SHORT_SHA'

timeout: '1200s'

substitutions:
  _APP_NAME: "my-flask1"
  _ARTIFACT_REPO: "spn-art"
  _INSTANCE_CONNECTION_NAME: "spn-run:us-central1:spn-sql"

options:
  env:
    - PROJECT_ID=${_PROJECT_ID}
    - PROJECT_NUMBER=${_PROJECT_NUMBER}
    - LOG_BUCKET=${_LOG_BUCKET}

logsBucket: "gs://${_LOG_BUCKET}"

