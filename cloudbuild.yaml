steps:
  # Debugging step: Check environment variables and substitutions before build
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Debug Before Build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Environment Variables and Substitutions Before Build:"
        env
        echo "Substitutions:"
        echo "PROJECT_ID: ${_PROJECT_ID}"
        echo "PROJECT_NUMBER: ${_PROJECT_NUMBER}"
        echo "LOG_BUCKET: ${_LOG_BUCKET}"
        echo "INSTANCE_CONNECTION_NAME: ${_INSTANCE_CONNECTION_NAME}"

  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REPO}/${_APP_NAME}:$SHORT_SHA', '.']

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image'
    args: ['push', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REPO}/${_APP_NAME}:$SHORT_SHA']

  # Step 3: Fetch secrets
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Fetch Secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Fetching Secrets..."
        gcloud secrets versions access latest --secret=db-user > /workspace/DB_USER
        gcloud secrets versions access latest --secret=db-password > /workspace/DB_PASSWORD
        echo "Secrets fetched."

  # Debugging Step: Verify Secrets Files
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Debug Secret Files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Debugging Secrets Files..."
        if [ -f /workspace/DB_USER ]; then
          echo "DB_USER file exists."
          echo "DB_USER contents: $(cat /workspace/DB_USER)"
        else
          echo "DB_USER file does not exist!"
        fi

        if [ -f /workspace/DB_PASSWORD ]; then
          echo "DB_PASSWORD file exists."
          echo "DB_PASSWORD contents: [HIDDEN]"
        else
          echo "DB_PASSWORD file does not exist!"
        fi

  
  # Step: Safely Read and Assign DB_USER
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Debug Safe DB_USER Assignment'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Safely assigning DB_USER..."
        if [ -f /workspace/DB_USER ]; then
          _DB_USER=$(cat /workspace/DB_USER | tr -d '\n' | xargs)
          echo "Assigned DB_USER: $_DB_USER"
          echo "Length of DB_USER: ${#_DB_USER}"
        else
          echo "DB_USER file does not exist!"
        fi
  


images:
  - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REPO}/${_APP_NAME}:$SHORT_SHA'

timeout: '1200s'

substitutions:
  _APP_NAME: "my-flask1"
  _ARTIFACT_REPO: "spn-art"
  _INSTANCE_CONNECTION_NAME: "spn-run:us-central1:spn-sql"
  _DB_USER: ""
  _DB_PASSWORD: ""

options:
  env:
    - PROJECT_ID=${_PROJECT_ID}
    - PROJECT_NUMBER=${_PROJECT_NUMBER}
    - LOG_BUCKET=${_LOG_BUCKET}

logsBucket: "gs://${_LOG_BUCKET}"